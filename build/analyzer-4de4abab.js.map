{"version":3,"file":"analyzer-4de4abab.js","sources":["../../src/pages/analyzer.svelte"],"sourcesContent":["<script lang='ts'>\n\n  interface Weapon {\n    name: string;\n    pen: number;\n    rof: number;\n    range: number;\n    type: 'AT'|'HE'|'SA'\n  }\n  interface Model {\n    name: string; // e.g. \"Second (Junior) Lieutenant\"\n    weapons: Weapon[];\n  }\n  interface Platoon {\n    name: string;\n    subName: string;\n    units: Unit[];\n  }\n  interface Army {\n    platoons: Platoon[]\n    orderDice: number;\n    points: number;\n  }\n  interface Unit {\n    sectionName: string; // e.g. \"Officer\"\n    name: string; // e.g. \"Junior Lieutenant\"\n    skill: 'Inexperienced' | 'Regular' | 'Veteran';\n    damageValue: number;\n    models?: Model[];\n    weapons?: Weapon[];\n    movement: number;\n  }\n  \n  // API response interfaces:\n  interface UnitItemAPI {\n    IsVehicle: 'false' | 'true';\n    ItemName: string;\n    ItemPen?: 'HE' | ' ' | 'n/a' | '+1'\n    ItemPEN?: 'HE' | ' ' | 'n/a' | '+1'\n    ItemQuantity: number;\n    ItemROF: string;\n    ItemNotes: string;\n    ItemMobility: string;\n    ItemDamageValue: string;\n    ItemRange: string;\n    IsGun: 'true' | 'false';\n    ItemLine: number;\n    \n  }\n  interface UnitAPI {\n    SectionName: string; // e.g. \"Officer\"\n    UnitName: string; // e.g. \"Junior Lieutenant\"\n    UnitSkill: 'Inexperienced' | 'Regular' | 'Veteran';\n    UnitItems: UnitItemAPI[];\n  }\n  interface PlatoonAPI {\n    PlatoonName: string;\n    PlatoonSubName: string;\n    Units: UnitAPI[];\n  }\n  interface ArmyAPI {\n    Platoons: PlatoonAPI[]\n    OrderDice: number;\n    TotalPoints: number;\n  }\n\n  let init = true;\n\n  let army: Army;\n  \n  async function importArmy(event: any): Promise<void> {\n\t\tconst formData = new FormData(event.target);\n\t\tconst url = formData.get('url');\n    \n    try {\n      const response = await fetch('https://www.philippesimpson.dk/armylist.php?url=' + url, {\n        method: 'GET',\n      });\n      \n      if (!response.ok) {\n\t\t\t  throw new Error(response.statusText);\n      }\n\n      const result: ArmyAPI = await response.json();\n      console.log('result', result)\n\n      init = false;\n\n      army = mapArmy(result);\n      console.log(army);\n    } catch (error) {\n      alert('Army list not found.');\n      throw error;\n    }\n  }\n\n  function mapArmy(army: ArmyAPI): Army {\n    const platoons: Platoon[] = army.Platoons.map(platoon => {\n      const Units: Unit[] = platoon.Units.map(unit => {\n        return {\n          name: unit.UnitName,\n          sectionName: unit.SectionName,\n          skill: unit.UnitSkill,\n          damageValue: getDamageValue(unit),\n          movement: getMobility(unit),\n          // models: getUnitItems(unit),\n          weapons: getUnitItems(unit)\n        }\n      })\n\n      return {\n        name: platoon.PlatoonName,\n        subName: platoon.PlatoonSubName,\n        units: Units,\n      }\n    });\n\n    return {\n      orderDice: army.OrderDice,\n      points: army.TotalPoints,\n      platoons\n    }\n  }\n\n  function getMobility(unit: UnitAPI): number {\n    // console.log('getMobility()', unit);\n    // if (\n    //   unit.SectionName.includes('Infantry') ||\n    //   unit.SectionName.includes('Officer') ||\n    //   unit.SectionName.includes('Sniper') ||\n    //   unit.SectionName.includes('Mortar') ||\n    //   unit.SectionName.includes('Anti-tank')\n    // ) {\n    //   return 12;\n    // }\n\n    if (\n      unit.SectionName.includes('Artillery')\n    ) {\n      return 6;\n    }\n    \n    if (unit.UnitItems[0].ItemMobility) {\n      // vehicle\n      if (unit.UnitItems[0].ItemMobility.includes('Wheeled')) {\n        return 24;\n      }\n      \n      if (unit.UnitItems[0].ItemMobility.includes('Tracked')) {\n        return 18;\n      }\n    }\n\n    // Assume basic infantry:\n    return 12;\n  }\n  \n  function getDamageValue(unit: UnitAPI): number {\n    \n    if (\n      unit.SectionName.includes('Infantry') ||\n      unit.SectionName.includes('Officer') ||\n      unit.SectionName.includes('Mortar') ||\n      unit.SectionName.includes('Sniper') ||\n      unit.SectionName.includes('Anti-tank') ||\n      unit.SectionName.includes('Artillery')\n    ) {\n      if (unit.UnitSkill === 'Inexperienced') return 3;\n      if (unit.UnitSkill === 'Regular') return 4;\n      if (unit.UnitSkill === 'Veteran') return 5;\n      \n      return 4;\n    }\n    \n    if (\n      unit.SectionName.includes('Armoured Cars') || \n      unit.SectionName.includes('Tanks and SP Guns')\n    ) {\n      // e.g. \"9+\"\n      return Number(unit.UnitItems[0].ItemDamageValue.slice(0, -1));\n    }\n\n    return 4;\n  }\n\n  function getUnitItems(unit: UnitAPI): Weapon[] {\n    // UnitItems:\n    // An array containing nodes of each type of weapon in unit, and of any unit abilities.\n    // Each weapon-type node defines the quantity of the weapon type.\n    \n    // HQ units & Infantry:\n    if (\n      unit.SectionName.includes('Infantry') ||\n      unit.SectionName.includes('Officer')\n    ) {\n      // Filter down to UnitItems with a quantity value, and transform to Model items.\n      return unit\n        .UnitItems\n        .filter(currentItem => !!currentItem.ItemQuantity)\n        // For each UnitItem type array:\n        // - transform from quantity to items array (an item for each weapon/model)\n        // - then flatten\n        .flatMap(quantityToItems)\n        // map to Model model:\n        // .map(item => mapToWeapon(item, unit));\n        .map(getWeapon);\n    }\n\n    // Support & Artillery Teams: \n    if (\n      unit.SectionName.includes('Mortar') ||\n      unit.SectionName.includes('Artillery') ||\n      unit.SectionName.includes('Sniper') ||\n      unit.SectionName.includes('Machine Gun') ||\n      unit.SectionName.includes('Anti-tank')\n    ) {\n      return unit\n        .UnitItems\n        .filter(currentItem => !!currentItem.ItemQuantity)\n        // map from ItemNotes team size value to quantity:\n        /* .map(item => {\n          let men = 0;\n          \n          const isSpotter = item.ItemNotes.includes('Spotter');\n          if (isSpotter) {\n            men = 1;\n          }\n\n          // e.g. \"Team (3 men), Fixed, Indirect fire, HE (2\")\"\n          const regex = /[0-9]/; // match a single character in the range between 0 and 9.\n          const isTeam = item.ItemNotes.search(regex);\n          \n          if (isTeam > -1) {\n            men = Number(item.ItemNotes.slice(isTeam, isTeam+1));\n          }\n          \n          return {\n            ...item,\n            ItemQuantity: men,\n          };\n        }) */\n        // transform from quantity to items array:\n        .flatMap((item) => quantityToItems(item))\n        // map to Model model:\n        // .map(toCrewModel)\n        .map(getWeapon)\n    }\n\n    // unit.SectionName.includes('Sniper') ||\n\n    /*\n      USSR sniper:\n      0:\n        IsVehicle: \"false\"\n        ItemLine: 1\n        ItemName: \"Sniper team\"\n        ItemNotes: \"Team (2 men), Sniper\"\n        ItemPEN: \"n/a\"\n        ItemQuantity: 1\n        ItemROF: \"1\"\n        ItemRange: \"36\"\"\n        ItemSequence: 1\n\n      US sniper:\n      0:\n        IsVehicle: \"false\"\n        ItemLine: 1\n        ItemName: \"Sniper team\"\n        ItemNotes: \"Team (2 men), Sniper (Sniper with rifle & pistol- Spotter with pistol)\"\n        ItemPEN: \"n/a\"\n        ItemQuantity: 1\n        ItemROF: \"1\"\n        ItemRange: \"36\"\"\n        ItemSequence: 1\n      1:\n        IsVehicle: \"false\"\n        ItemLine: 2\n        ItemName: \"with Pistol\"\n        ItemNotes: \"Assault\"\n        ItemPen: \"n/a\"\n        ItemROF: \"1\"\n        ItemRange: \"6\"\"\n        ItemSequence: 2\n      2:\n        IsVehicle: \"false\"\n        ItemLine: 3\n        ItemName: \"with Pistol replaced by Submachine gun\"\n        ItemNotes: \"Assault\"\n        ItemPEN: \"n/a\"\n        ItemQuantity: 1\n        ItemROF: \"2\"\n        ItemRange: \"12\"\"\n        ItemSequence: 3\n    */\n \n    if (\n      unit.SectionName.includes('Armoured Cars') || \n      unit.SectionName.includes('Tanks and SP Guns')\n    ) {\n      return unit\n        .UnitItems\n        // .filter(currentItem => currentItem.IsVehicle === 'true')\n        // // for each vehicle model get its associated/mounted weapons:\n        // .map(vehicle => {\n        //   const weapons = unit.UnitItems.filter(item => item.IsGun === 'true' && (item.ItemLine === vehicle.ItemLine))\n          \n        //   return {\n        //     name: vehicle.ItemName,\n        //     weapons: weapons.flatMap(getWeapon)\n        //   }\n        // })\n        // .flatMap(weapons = weapons.flatMap(getWeapon))\n        .filter(currentItem => currentItem.IsGun === 'true')\n        .map(getWeapon)\n    }\n\n    // Unknown unit type\n    return [];\n  }\n\n  function quantityToItems(item: UnitItemAPI): UnitItemAPI[] {\n    return Array.from(Array(item.ItemQuantity)).map(() => item);\n  }\n\n  function getPen(item: UnitItemAPI): number {\n    function getPenFromNotes(notes: string): number {\n      const regex = /HE \\(/g; // e.g. HE (2\")\n      // get inch (= Pen), convert to number:\n      return Number(notes.charAt(notes.search(regex) + 4));\n    }\n\n    return Number(item.ItemPEN)\n      || Number(item.ItemPen)\n      || ((item.ItemPen === 'HE' || item.ItemPEN === 'HE') ? getPenFromNotes(item.ItemNotes) : 0)\n      || 0;\n  }\n  function getRange(range: string): number {\n    // console.log('getRange', range, Number(range), typeof range === 'string')\n    // Expected value format: 12, 12\", 12\"-60\", or 60\"(30-72).\n\n    if(typeof range === 'string') {\n      if(range.length === 0) {\n        // if value === \" \", assume an SMG.\n        return 12;\n      }\n      // Expected value format: 12\", 12\"-60\", or 60\"(30-72).  \n      return Number( range.slice(-3, -1) );\n    }\n\n    // Expected value format: 12.\n    return Number(range) || 12;\n  }\n  function getROF(itemROF: string): number {\n    \n    if (Number(itemROF)) {\n      return Number(itemROF);\n    }\n\n    // if value === \"D6\", assume an flamethrower.\n    if (itemROF.includes('D6')) {\n      return 1;\n    }\n    // if value === \"-\", assume 'equipped as modelled', so an SMG.\n    if (itemROF.includes('-')) {\n      return 2;\n    }\n\n    // if value === \" \", assume an SMG.\n    return 2;\n  }\n\n  function getWeapon(item: UnitItemAPI): Weapon {\n    return {\n      pen: getPen(item),\n      rof: getROF(item.ItemROF),\n      range: getRange(item.ItemRange),\n      type: getType(item)\n    }\n  }\n\n  function getType(item: UnitItemAPI): 'AT'|'HE'|'SA' {\n    if (Number(item.ItemPEN) || Number(item.ItemPen)) {\n      return 'AT';\n    }\n    if (item.ItemPen === 'HE' || item.ItemPEN === 'HE') {\n      return 'HE';\n    }\n    return 'SA'; // Small-Arms\n  }\n</script>\n\n\t{#if init}\n\t<form on:submit|preventDefault={importArmy}>\n\t\t<label for='url'>Import army:</label>\n\t\t<input type=\"url\" name=\"url\">\n\t\t<button type=\"submit\">Submit</button>\n\t</form>\n  {:else}\n  <div class=\"flow\">\n    <div>\n      Order Dice: {army.orderDice}\n    </div>\n    <div>\n      Total Points: {army.points}\n    </div>\n    {#each army.platoons as platoon}\n    <div>\n      {platoon.name}\n    </div>\n    <h3>\n      {platoon.subName}\n    </h3>\n    <div>\n      <pre>\n        {JSON.stringify(platoon,null,2)}\n      </pre>\n    </div>\n    {/each}\n    <!-- <div>\n      Model count (bodies): {models.length}\n    </div> -->\n  \n    <!-- Shots pr. turn -->\n    <div>\n      <!-- <h3>Shots pr. turn (rate of fire)</h3>\n      <div class=\"table\">\n        <div>Total number of Shots</div>\n        <div>{shots.length}</div>\n        <div></div>\n        \n        <div>Avg. shots pr. weapon</div>\n        <div>{(shots.length / weapons.length).toFixed(2)}</div>\n        <div></div>\n      </div> -->\n    </div>\n\n    <!-- Weapons range -->\n    <div>\n      <!-- <h3>Weapons Range distribution</h3>\n      <div class=\"table\">\n        <div>Number of Weapons</div>\n        <div>{weapons.length}</div>\n        <div></div>\n      </div> -->\n    </div>\n\n    <!-- Mobility -->\n    <div>\n      <!-- <h3>Units Mobility (Run speed) distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n        \n        <div>6\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 6).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 6).length}%\"></div>\n        \n        <div>12\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 12).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 12).length}%\"></div>\n        \n        <div>18\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 18).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 18).length}%\"></div>\n        \n        <div>24\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 24).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 24).length}%\"></div>\n      </div> -->\n    </div>\n    \n    <!-- Units Damage Values -->\n    <div>\n      <!-- <h3>Units Damage Value distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n\n        <div>3</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 3).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 3).length}%\"></div>\n        \n        <div>4</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 4).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 4).length}%\"></div>\n        \n        <div>5</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 5).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 5).length}%\"></div>\n        \n        <div>6</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 6).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 6).length}%\"></div>\n        \n        <div>7</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 7).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 7).length}%\"></div>\n        \n        <div>8</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 8).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 8).length}%\"></div>\n        \n        <div>9</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 9).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 9).length}%\"></div>\n        \n      </div> -->\n    </div>\n    \n    <!-- Experiency -->\n    <div>\n      <!-- <h3>Units Experience distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n      </div>\n      <div class=\"is-half\">\n        <canvas id=\"expChart\"></canvas>\n      </div> -->\n    </div>\n\n  </div>\n\n\t{/if}\n\n\n<style>\n  table {\n    border-collapse: collapse;\n  }\n  table td, table th {\n    border: 1px solid #c9c9c9;\n    padding: 8px;\n    text-align: left;\n  }\n  li {\n    /* display: inline-block; */\n    background-color: green;\n    list-style-type: none; /* Remove bullets */\n    padding: 0; /* Remove padding */\n    margin: 0; /* Remove margins */\n  }\n\n  .table {\n    display: grid;\n    grid-template-columns: 15% 5% 80%;\n    gap: var(--spacing-small);\n  }\n</style>\n"],"names":["ctx","orderDice","points","platoons","length","name","subName","JSON","stringify","getMobility","unit","SectionName","includes","UnitItems","ItemMobility","getDamageValue","UnitSkill","Number","ItemDamageValue","slice","getUnitItems","filter","currentItem","ItemQuantity","flatMap","quantityToItems","map","getWeapon","item","IsGun","Array","from","getPen","ItemPEN","ItemPen","notes","ItemNotes","charAt","search","pen","rof","itemROF","ItemROF","range","ItemRange","type","getType","army","init","event","url","FormData","target","get","response","fetch","method","ok","Error","statusText","result","json","console","log","Platoons","platoon","Units","UnitName","sectionName","skill","damageValue","movement","weapons","PlatoonName","PlatoonSubName","units","OrderDice","TotalPoints","mapArmy","error","alert"],"mappings":"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"}