{"version":3,"file":"analyzer-a795dc40.js","sources":["../../src/pages/analyzer.svelte"],"sourcesContent":["<script lang='ts'>\n  import { onMount } from 'svelte';\n\n  interface Weapon {\n    pen: number;\n    rof: number;\n    range: number;\n  }\n  interface Model {\n    name: string; // e.g. \"Second (Junior) Lieutenant\"\n    weapons: Weapon[];\n  }\n  interface Platoon {\n    name: string;\n    subName: string;\n    units: Unit[];\n  }\n  interface Army {\n    platoons: Platoon[]\n    orderDice: number;\n    points: number;\n  }\n  interface Unit {\n    sectionName: string; // e.g. \"Officer\"\n    name: string; // e.g. \"Junior Lieutenant\"\n    skill: 'Inexperienced' | 'Regular' | 'Veteran';\n    damageValue: number;\n    models: Model[];\n    movement: number;\n  }\n  \n  // API response interfaces:\n  interface UnitItemAPI {\n    IsVehicle: 'false' | 'true';\n    ItemName: string;\n    ItemPen?: 'HE' | ' ' | 'n/a' | '+1'\n    ItemPEN?: 'HE' | ' ' | 'n/a' | '+1'\n    ItemQuantity: number;\n    ItemROF: string;\n    ItemNotes: string;\n    ItemMobility: string;\n    ItemDamageValue: string;\n    ItemRange: string;\n    IsGun: 'true' | 'false';\n    ItemLine: number;\n    \n  }\n  interface UnitAPI {\n    SectionName: string; // e.g. \"Officer\"\n    UnitName: string; // e.g. \"Junior Lieutenant\"\n    UnitSkill: 'Inexperienced' | 'Regular' | 'Veteran';\n    UnitItems: UnitItemAPI[];\n  }\n  interface PlatoonAPI {\n    PlatoonName: string;\n    PlatoonSubName: string;\n    Units: UnitAPI[];\n  }\n  interface ArmyAPI {\n    Platoons: PlatoonAPI[]\n    OrderDice: number;\n    TotalPoints: number;\n  }\n\n  let init = true;\n\n  let army: Army;\n  // let units: Unit[];\n  // let models: Model[];\n  // let weapons: Weapon[];\n  // let shots: Shot[];\n  // let penetration: number[];\n  \n  async function importArmy(event: any): Promise<void> {\n\t\tconst formData = new FormData(event.target);\n\t\tconst url = formData.get('url');\n    \n    try {\n      const response = await fetch('https://www.philippesimpson.dk/armylist.php?url=' + url, {\n        method: 'GET',\n      });\n      \n      if (!response.ok) {\n\t\t\t  throw new Error(response.statusText);\n      }\n\n      const result: ArmyAPI = await response.json();\n      console.log('result', result)\n\n      init = false;\n\n      army = mapArmy(result);\n      console.log(army);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  function mapArmy(army: ArmyAPI): Army {\n    const platoons: Platoon[] = army.Platoons.map(platoon => {\n      const Units: Unit[] = platoon.Units.map(unit => {\n        return {\n          name: unit.UnitName,\n          sectionName: unit.SectionName,\n          skill: unit.UnitSkill,\n          damageValue: getDamageValue(unit),\n          movement: getMobility(unit),\n          models: getModelItems(unit)\n        }\n      })\n\n      return {\n        name: platoon.PlatoonName,\n        subName: platoon.PlatoonSubName,\n        units: Units,\n      }\n    });\n\n    return {\n      orderDice: army.OrderDice,\n      points: army.TotalPoints,\n      platoons\n    }\n  }\n\n  function getMobility(unit: UnitAPI): number {\n    // console.log('getMobility()', unit);\n    // if (\n    //   unit.SectionName.includes('Infantry') ||\n    //   unit.SectionName.includes('Officer') ||\n    //   unit.SectionName.includes('Sniper') ||\n    //   unit.SectionName.includes('Mortar') ||\n    //   unit.SectionName.includes('Anti-tank')\n    // ) {\n    //   return 12;\n    // }\n\n    if (\n      unit.SectionName.includes('Artillery')\n    ) {\n      return 6;\n    }\n    \n    if (unit.UnitItems[0].ItemMobility) {\n      // vehicle\n      if (unit.UnitItems[0].ItemMobility.includes('Wheeled')) {\n        return 24;\n      }\n      \n      if (unit.UnitItems[0].ItemMobility.includes('Tracked')) {\n        return 18;\n      }\n    }\n\n    // Assume basic infantry:\n    return 12;\n  }\n  \n  function getDamageValue(unit: UnitAPI): number {\n    \n    if (\n      unit.SectionName.includes('Infantry') ||\n      unit.SectionName.includes('Officer') ||\n      unit.SectionName.includes('Mortar') ||\n      unit.SectionName.includes('Sniper') ||\n      unit.SectionName.includes('Anti-tank') ||\n      unit.SectionName.includes('Artillery')\n    ) {\n      if (unit.UnitSkill === 'Inexperienced') return 3;\n      if (unit.UnitSkill === 'Regular') return 4;\n      if (unit.UnitSkill === 'Veteran') return 5;\n      \n      return 4;\n    }\n    \n    if (\n      unit.SectionName.includes('Armoured Cars') || \n      unit.SectionName.includes('Tanks and SP Guns')\n    ) {\n      // e.g. \"9+\"\n      return Number(unit.UnitItems[0].ItemDamageValue.slice(0, -1));\n    }\n\n    return 4;\n  }\n\n  function getModelItems(unit: UnitAPI): Model[] {\n    // UnitItems:\n    // An array containing nodes of each type of weapon in unit, and of any unit abilities.\n    // Each weapon-type node defines the quantity of the weapon type.\n    \n    // HQ units & Infantry:\n    if (\n      unit.SectionName.includes('Infantry') ||\n      unit.SectionName.includes('Officer')\n    ) {\n      // Filter down to UnitItems with a quantity value, and transform to Model items.\n      return unit\n        .UnitItems\n        .filter(currentItem => !!currentItem.ItemQuantity)\n        // For each UnitItem type array:\n        // - transform from quantity to items array (an item for each weapon/model)\n        // - then flatten\n        .flatMap((item) => quantityToItems(item))\n        // map to Model model:\n        .map(item => mapToModel(item, unit));\n    }\n\n    // Support & Artillery Teams: \n    if (\n      unit.SectionName.includes('Mortar') ||\n      unit.SectionName.includes('Artillery') ||\n      unit.SectionName.includes('Sniper') ||\n      unit.SectionName.includes('Anti-tank')\n    ) {\n      return unit\n        .UnitItems\n        .filter(currentItem => !!currentItem.ItemQuantity)\n        // map from team size value to quantity:\n        .map(item => {\n          let men = 0;\n          \n          const isSpotter = item.ItemNotes.includes('Spotter');\n          if (isSpotter) {\n            men = 1;\n          }\n\n          // e.g. \"Team (3 men), Fixed, Indirect fire, HE (2\")\"\n          const regex = /[0-9]/; // match a single character in the range between 0 and 9.\n          const isTeam = item.ItemNotes.search(regex);\n          \n          if (isTeam > -1) {\n            men = Number(item.ItemNotes.slice(isTeam, isTeam+1));\n          }\n          \n          return {\n            ...item,\n            ItemQuantity: men,\n          };\n        })\n        // transform from quantity to items array:\n        .flatMap((item) => quantityToItems(item))\n        // map to Model model:\n        .map(toCrewModel)\n    }\n \n    if (\n      unit.SectionName.includes('Armoured Cars') || \n      unit.SectionName.includes('Tanks and SP Guns')\n    ) {\n      return unit\n        .UnitItems\n        .filter(currentItem => currentItem.IsVehicle === 'true')\n        // for each vehicle model get its associated/mounted weapons:\n        .map(vehicle => {\n          const weapons = unit.UnitItems.filter(item => item.IsGun === 'true' && (item.ItemLine === vehicle.ItemLine))\n          \n          return {\n            name: vehicle.ItemName,\n            weapons: weapons.flatMap(getWeapon)\n          }\n        })\n    }\n\n    // Unknown unit type\n    return [];\n  }\n\n  function quantityToItems(item: UnitItemAPI): UnitItemAPI[] {\n    return Array.from(Array(item.ItemQuantity)).map(() => item);\n  }\n\n  function mapToModel(item: UnitItemAPI, unit: UnitAPI): Model {\n    // console.log('mapToModel()', item, unit)\n    return {\n      name: item.ItemName,\n      weapons: [getWeapon(item)]\n    }\n  }\n  function toCrewModel(item: UnitItemAPI, index: number): Model {\n    // Attach crew weapon to first soldier, rest of crew is unarmed. \n    return {\n      name: item.ItemName,\n      weapons: index === 0 ? [getWeapon(item)] : []\n    }\n  }\n\n  function getPen(item: UnitItemAPI): number {\n    function getPenFromNotes(notes: string): number {\n      const regex = /HE \\(/g; // e.g. HE (2\")\n      // get inch (= Pen), convert to number:\n      return Number(notes.charAt(notes.search(regex) + 4));\n    }\n\n    return Number(item.ItemPEN)\n      || Number(item.ItemPen)\n      || ((item.ItemPen === 'HE' || item.ItemPEN === 'HE') ? getPenFromNotes(item.ItemNotes) : 0)\n      || 0;\n  }\n  function getRange(range: string): number {\n    // console.log('getRange', range, Number(range), typeof range === 'string')\n    // Expected value format: 12, 12\", 12\"-60\", or 60\"(30-72).\n\n    if(typeof range === 'string') {\n      if(range.length === 0) {\n        // if value === \" \", assume an SMG.\n        return 12;\n      }\n      // Expected value format: 12\", 12\"-60\", or 60\"(30-72).  \n      return Number( range.slice(-3, -1) );\n    }\n\n    // Expected value format: 12.\n    return Number(range) || 12;\n  }\n  function getROF(itemROF: string): number {\n    \n    if (Number(itemROF)) {\n      return Number(itemROF);\n    }\n\n    // if value === \"D6\", assume an flamethrower.\n    if (itemROF.includes('D6')) {\n      return 1;\n    }\n    // if value === \"-\", assume 'equipped as modelled', so an SMG.\n    if (itemROF.includes('-')) {\n      return 2;\n    }\n\n    // if value === \" \", assume an SMG.\n    return 2;\n  }\n\n  function getWeapon(item: UnitItemAPI): Weapon {\n    return {\n      pen: getPen(item),\n      rof: getROF(item.ItemROF),\n      range: getRange(item.ItemRange),\n    }\n  }\n</script>\n\n\t{#if init}\n\t<form on:submit|preventDefault={importArmy}>\n\t\t<label for='url'>Import army:</label>\n\t\t<input type=\"url\" name=\"url\">\n\t\t<button type=\"submit\">Submit</button>\n\t</form>\n  {:else}\n  <div class=\"flow\">\n    <div>\n      Order Dice: {army.orderDice}\n    </div>\n    <div>\n      Total Points: {army.points}\n    </div>\n    {#each army.platoons as platoon}\n    <div>\n      {platoon.name}\n    </div>\n    <h3>\n      {platoon.subName}\n    </h3>\n    {/each}\n    <!-- <div>\n      Model count (bodies): {models.length}\n    </div> -->\n  \n    <!-- Shots pr. turn -->\n    <div>\n      <!-- <h3>Shots pr. turn (rate of fire)</h3>\n      <div class=\"table\">\n        <div>Total number of Shots</div>\n        <div>{shots.length}</div>\n        <div></div>\n        \n        <div>Avg. shots pr. weapon</div>\n        <div>{(shots.length / weapons.length).toFixed(2)}</div>\n        <div></div>\n      </div> -->\n    </div>\n\n    <!-- Weapons range -->\n    <div>\n      <!-- <h3>Weapons Range distribution</h3>\n      <div class=\"table\">\n        <div>Number of Weapons</div>\n        <div>{weapons.length}</div>\n        <div></div>\n      </div> -->\n    </div>\n\n    <!-- Mobility -->\n    <div>\n      <!-- <h3>Units Mobility (Run speed) distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n        \n        <div>6\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 6).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 6).length}%\"></div>\n        \n        <div>12\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 12).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 12).length}%\"></div>\n        \n        <div>18\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 18).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 18).length}%\"></div>\n        \n        <div>24\"</div>\n        <div>{units.filter(unit => getMobility(unit) === 24).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getMobility(unit) === 24).length}%\"></div>\n      </div> -->\n    </div>\n    \n    <!-- Units Damage Values -->\n    <div>\n      <!-- <h3>Units Damage Value distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n\n        <div>3</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 3).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 3).length}%\"></div>\n        \n        <div>4</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 4).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 4).length}%\"></div>\n        \n        <div>5</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 5).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 5).length}%\"></div>\n        \n        <div>6</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 6).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 6).length}%\"></div>\n        \n        <div>7</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 7).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 7).length}%\"></div>\n        \n        <div>8</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 8).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 8).length}%\"></div>\n        \n        <div>9</div>\n        <div>{units.filter(unit => getDamageValue(unit) === 9).length}</div>\n        <div class=\"bg-grey\" style=\"width: {units.filter(unit => getDamageValue(unit) === 9).length}%\"></div>\n        \n      </div> -->\n    </div>\n    \n    <!-- Experiency -->\n    <div>\n      <!-- <h3>Units Experience distribution</h3>\n      <div class=\"table\">\n        <div>Total number of Units</div>\n        <div>{units.length}</div>\n        <div></div>\n      </div>\n      <div class=\"is-half\">\n        <canvas id=\"expChart\"></canvas>\n      </div> -->\n    </div>\n\n  </div>\n\n\t{/if}\n\n\n<style>\n  table {\n    border-collapse: collapse;\n  }\n  table td, table th {\n    border: 1px solid #c9c9c9;\n    padding: 8px;\n    text-align: left;\n  }\n  li {\n    /* display: inline-block; */\n    background-color: green;\n    list-style-type: none; /* Remove bullets */\n    padding: 0; /* Remove padding */\n    margin: 0; /* Remove margins */\n  }\n\n  .table {\n    display: grid;\n    grid-template-columns: 15% 5% 80%;\n    gap: var(--spacing-small);\n  }\n</style>\n"],"names":["ctx","orderDice","points","platoons","length","name","subName","getMobility","unit","SectionName","includes","UnitItems","ItemMobility","getDamageValue","UnitSkill","Number","ItemDamageValue","slice","getModelItems","filter","currentItem","ItemQuantity","flatMap","item","quantityToItems","map","ItemName","weapons","getWeapon","mapToModel","men","ItemNotes","isTeam","search","toCrewModel","IsVehicle","vehicle","IsGun","ItemLine","Array","from","index","getPen","ItemPEN","ItemPen","notes","charAt","pen","rof","itemROF","ItemROF","range","ItemRange","army","init","event","url","FormData","target","get","response","fetch","method","ok","Error","statusText","result","json","console","log","Platoons","platoon","Units","UnitName","sectionName","skill","damageValue","movement","models","PlatoonName","PlatoonSubName","units","OrderDice","TotalPoints","mapArmy","error"],"mappings":"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"}